/.var Discord = require('discord.io');
var logger = require('winston');
var auth = require('./auth.json');



    pollVote(user/.var Discord = require('discord.io');
var logger = require('winston');
var auth = require('./auth.json');

class Poll {
    constructor(pollID, pollName) {
        this.id = pollID;
        this.pollName = pollName;

        this.pollOptions = {};
        this.pollVotes = {};
        this.hasVoted = [];
    }

    //Make it possible to store more information
    addPollOption(option, info) {
        if (!(option in this.pollOptions)) {
            this.pollOptions[option] = info;
            this.pollVotes[option] = 0;
            return "The poll option was successfully added.";
        } else {
            return "This poll option already exists";
        }
    }

    deletePollOption(option) {
        if (!(option in this.pollOptions)) {
            return "This poll option does not exist";
        } else {
            delete this.pollOptions[option];
            delete this.pollVotes[option];
            return "The poll option was successfully removed";
        }
    }

    listPollOptions(bot, channelID) {
        var string;
        for (var key in this.pollOptions) {
            string = string + this.pollOptions[key] + '\n';
        }

        bot.sendMessage({
            to: channelID,
            message: this.pollName + ' poll options are:\n' + string
        });
    }

    pollVote(userID, option) {
        if (this.hasVoted.includes(userID)) {
            return "This poll only allows one vote per person";
        } else {
            this.pollVotes[option] += 1;
            this.hasVoted.add(userID);
            return "Your vote has been registered, thank you for voting!";
        }
    }
}

var polls = {};

//configure logger settings
logger.remove(logger.transports.Console);
logger.add(logger.transports.Console, {
    colorize: true
});
logger.level = 'debug';

//Initialize bot
var bot = new Discord.Client({
    token: auth.token,
    autorun: true
});

bot.on('ready', function(evt) {
    logger.info('Connected');
    logger.info('Logged in as: ');
    logger.info(bot.username + ' - (' + bot.id + ')'); 
});

bot.on('message', function(user, userID, channelID, message, evt) {
    //if (message.substring(0, 1) == '!') {
        var args = message.substring(1).split(' ');
        var cmd = args[0];

        //Implement error checking and tests for argumetn validation
        switch(cmd) {
        //!CreatePoll <PollID> <PollName>
        case 'CreatePoll':
            polls[args[1]] = new Poll(args[1], args[2]);
            bot.sendMessage({
                to: channelID,
                message: 'Poll with ID: ' + args[1] + ' and Name: ' + args[2] + ' has been created'
            }); 
            break;
        //!DeletePoll <PollID>
        case 'DeletePoll':
            delete polls[args[1]];
            bot.sendMessage({
                to: channelID,
                message: 'Poll with ID: ' + args[1] + ' has been deleted'
            }); 
            break;
        //!ListPolls
        case 'ListPolls':
            var string = '';
            for (var key in polls) {
                string = string + key + '\n';
            }
            bot.sendMessage({
                to: channelID,
                message: string
            });
            break;
        //!AddPollOption <PollID> <PollOption> <OptionInfo>
        case 'AddPollOption':
            if (args[1] in polls) {
                var string = polls[args[1]].addPollOption(args[2], args[3]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                });
            }
            break;
        //!DeletePollOption <PollID> <PollOption>
        case 'DeletePollOption':
            if (args[1] in polls) {
                var string = polls[args[1]].deletePollOption(args[2]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                })
            }
            break;
        //!Vote <PollID> <PollOption>
        case 'Vote':
        //If there is only one active poll, you should be able to omit PollID
            if (args[1] in polls) {
                var string = polls[args[1]].pollVote(userID, args[2]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                })
            }
            break;
        case 'Test':
        
        default:
            bot.sendMessage({
                to: channelID,
                message: 'I SAW THAT!'
            });
            break;
        }
    //}
});
D, option) {
        if (this./.var Discord = require('discord.io');
var logger = require('winston');
var auth = require('./auth.json');

class Poll {
    constructor(pollID, pollName) {
        this.id = pollID;
        this.pollName = pollName;

        this.pollOptions = {};
        this.pollVotes = {};
        this.hasVoted = [];
    }

    //Make it possible to store more information
    addPollOption(option, info) {
        if (!(option in this.pollOptions)) {
            this.pollOptions[option] = info;
            this.pollVotes[option] = 0;
            return "The poll option was successfully added.";
        } else {
            return "This poll option already exists";
        }
    }

    deletePollOption(option) {
        if (!(option in this.pollOptions)) {
            return "This poll option does not exist";
        } else {
            delete this.pollOptions[option];
            delete this.pollVotes[option];
            return "The poll option was successfully removed";
        }
    }

    listPollOptions(bot, channelID) {
        var string;
        for (var key in this.pollOptions) {
            string = string + this.pollOptions[key] + '\n';
        }

        bot.sendMessage({
            to: channelID,
            message: this.pollName + ' poll options are:\n' + string
        });
    }

    pollVote(userID, option) {
        if (this.hasVoted.includes(userID)) {
            return "This poll only allows one vote per person";
        } else {
            this.pollVotes[option] += 1;
            this.hasVoted.add(userID);
            return "Your vote has been registered, thank you for voting!";
        }
    }
}

var polls = {};

//configure logger settings
logger.remove(logger.transports.Console);
logger.add(logger.transports.Console, {
    colorize: true
});
logger.level = 'debug';

//Initialize bot
var bot = new Discord.Client({
    token: auth.token,
    autorun: true
});

bot.on('ready', function(evt) {
    logger.info('Connected');
    logger.info('Logged in as: ');
    logger.info(bot.username + ' - (' + bot.id + ')'); 
});

bot.on('message', function(user, userID, channelID, message, evt) {
    //if (message.substring(0, 1) == '!') {
        var args = message.substring(1).split(' ');
        var cmd = args[0];

        //Implement error checking and tests for argumetn validation
        switch(cmd) {
        //!CreatePoll <PollID> <PollName>
        case 'CreatePoll':
            polls[args[1]] = new Poll(args[1], args[2]);
            bot.sendMessage({
                to: channelID,
                message: 'Poll with ID: ' + args[1] + ' and Name: ' + args[2] + ' has been created'
            }); 
            break;
        //!DeletePoll <PollID>
        case 'DeletePoll':
            delete polls[args[1]];
            bot.sendMessage({
                to: channelID,
                message: 'Poll with ID: ' + args[1] + ' has been deleted'
            }); 
            break;
        //!ListPolls
        case 'ListPolls':
            var string = '';
            for (var key in polls) {
                string = string + key + '\n';
            }
            bot.sendMessage({
                to: channelID,
                message: string
            });
            break;
        //!AddPollOption <PollID> <PollOption> <OptionInfo>
        case 'AddPollOption':
            if (args[1] in polls) {
                var string = polls[args[1]].addPollOption(args[2], args[3]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                });
            }
            break;
        //!DeletePollOption <PollID> <PollOption>
        case 'DeletePollOption':
            if (args[1] in polls) {
                var string = polls[args[1]].deletePollOption(args[2]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                })
            }
            break;
        //!Vote <PollID> <PollOption>
        case 'Vote':
        //If there is only one active poll, you should be able to omit PollID
            if (args[1] in polls) {
                var string = polls[args[1]].pollVote(userID, args[2]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                })
            }
            break;
        case 'Test':
        
        default:
            bot.sendMessage({
                to: channelID,
                message: 'I SAW THAT!'
            });
            break;
        }
    //}
});
asVoted.includes(userID)) {
            return "This poll only allows one vote per person";
        } else {
            this.pollVotes[option] += 1;
            this.hasVoted.add(userID);
            return "Your vote has been registered, thank you for voting!";
        }
    }
}

var polls = {};

//configure logger settings
logger.remove(logger.transports.Console);
logger.add(logger.transports.Console, {
    colorize: true
});
logger.level = 'debug';

//Initialize bot
var bot = new Discord.Client({
    token: auth.token,
    autorun: true
});

bot.on('ready', function(evt) {
    logger.info('Connected');
    logger.info('Logged in as: ');
    logger.info(bot.username + ' - (' + bot.id + ')'); 
});

bot.on('message', function(user, userID, channelID, message, evt) {
    //if (message.substring(0, 1) == '!') {
        var args = message.substring(1).split(' ');
        var cmd = args[0];

        //Implement error checking and tests for argumetn validation
        switch(cmd) {
        //!CreatePoll <PollID> <PollName>
        case 'CreatePoll':
            polls[args[1]] = new Poll(args[1], args[2]);
            bot.sendMessage({
                to: channelID,
                message: 'Poll with ID: ' + args[1] + ' and Name: ' + args[2] + ' has been created'
            }); 
            break;
        //!DeletePoll <PollID>
        case 'DeletePoll':
            delete polls[args[1]];
            bot.sendMessage({
                to: channelID,
                message: 'Poll with ID: ' + args[1] + ' has been deleted'
            }); 
            break;
        //!ListPolls
        case 'ListPolls':
            var string = '';
            for (var key in polls) {
                string = string + key + '\n';
            }
            bot.sendMessage({
                to: channelID,
                message: string
            });
            break;
        //!AddPollOption <PollID> <PollOption> <OptionInfo>
        case 'AddPollOption':
            if (args[1] in polls) {
                var string = polls[args[1]].addPollOption(args[2], args[3]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                });
            }
            break;
        //!DeletePollOption <PollID> <PollOption>
        case 'DeletePollOption':
            if (args[1] in polls) {
                var string = polls[args[1]].deletePollOption(args[2]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                })
            }
            break;
        //!Vote <PollID> <PollOption>
        case 'Vote':
        //If there is only one active poll, you should be able to omit PollID
            if (args[1] in polls) {
                var string = polls[args[1]].pollVote(userID, args[2]);
                bot.sendMessage({
                    to: channelID,
                    message: string
                });
            } else {
                bot.sendMessage({
                    to: channelID,
                    message: 'ERROR: This pollID does not exist, did you type it in correctly?'
                })
            }
            break;
        case 'Test':
        
        default:
            bot.sendMessage({
                to: channelID,
                message: 'I SAW THAT!'
            });
            break;
        }
    //}
});









if (reaction.message.id == thisPoll.message.id && !(user.id == thisPoll.botID)) {
            if (!(thisPoll.hasVoted.includes(user.id))) {
                var optionExists = false;
                for (key in thisPoll.pollOptions) {
                    if (reaction.emoji.name == thisPoll.pollOptions[key]) {
                        thisPoll.pollVotes[key] += 1;
                        thisPoll.userVotes[user.id] = reaction.emoji.name;
                        thisPoll.hasVoted.push(user.id);
                        optionExists = true;
                        if (thisPoll.hideVotes) {
                            reaction.remove(user);
                        }
                        break;
                    }
                }
                if (!(optionExists)) {
                    reaction.message.channel.send("This is not an option in the poll");
                    reaction.remove(user);
                }

            } else {
                var messageEmojis = reaction.message.reactions.array();
                var optionExists = false;
                for (key in thisPoll.pollOptions) {
                    if (reaction.emoji.name == thisPoll.pollOptions[key]) {
                        for (emoji in messageEmojis) {
                            if (messageEmojis[emoji].emoji.name == thisPoll.userVotes[user.id]) {
                                for (option in thisPoll.pollOptions) {
                                    if (thisPoll.userVotes[user.id] == thisPoll.pollOptions[option]) {
                                        thisPoll.userVotes[user.id] = reaction.emoji.name;
                                        thisPoll.pollVotes[key] += 1;
                                        optionExists = true;
                                        
                                        if (!(thisPoll.hideVotes)) {
                                            messageEmojis[emoji].remove(user);
                                        }

                                        if (thisPoll.hideVotes) {
                                            thisPoll.pollVotes[option] -= 1;
                                            reaction.remove(user);
                                        }
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                if (!(optionExists)) {
                    reaction.message.channel.send("This is not an option in the poll!");
                    reaction.remove(user);
                }
            }
            return true;
        } else {
            return false;
        }